
#ifndef AIBC_GFQ2_MESSAGE_H
#define AIBC_GFQ2_MESSAGE_H

#include "gfq2/Utility.h"
#include "acl/MemoryBlock.h"
#include "anf/protocol/BencodingMessage.h"

AIBC_GFQ_NAMESPACE_START

/**
 * GFQ Message
 * describe all transport protocol message of Global File Queue
 */

//Message type define
//SegmentServer --> Master
enum
{
    GFQ_REQUEST_REGISTER          = 0x001,
    GFQ_RESPONSE_REGISTER         = 0x101,
    GFQ_REQUEST_UNREGISTER        = 0x002,
    GFQ_RESPONSE_UNREGISTER       = 0x102,
    GFQ_REQUEST_ADD_SEGMENT       = 0x003,
    GFQ_RESPONSE_ADD_SEGMENT      = 0x103,
    GFQ_REQUEST_ONLINE            = 0x004,
    GFQ_RESPONSE_ONLINE           = 0x104,
    GFQ_REQUEST_UPDATE_SEGMENT    = 0x005,
    GFQ_RESPONSE_UPDATE_SEGMENT   = 0x105,
    GFQ_REQUEST_UPDATE_STAT_INFO  = 0x006,
    GFQ_RESPONSE_UPDATE_STAT_INFO = 0x106,
    GFQ_REQUEST_HEARTBEAT         = 0x007,
    GFQ_RESPONSE_HEARTBEAT        = 0x107,
    GFQ_REQUEST_EVENT             = 0x008,
    
    //Master --> SegmentServer
    GFQ_REQUEST_ALLOCATE          = 0x021,
    GFQ_RESPONSE_ALLOCATE         = 0x121,
    GFQ_REQUEST_DEALLOCATE        = 0x022,
    GFQ_RESPONSE_DEALLOCATE       = 0x122,
    
    //Client --> Master
    GFQ_REQUEST_QUEUE_LIST        = 0x041,
    GFQ_RESPONSE_QUEUE_LIST       = 0x141,
    GFQ_REQUEST_NODE_LIST         = 0x042,
    GFQ_RESPONSE_NODE_LIST        = 0x142,
    GFQ_REQUEST_QUEUE_INFO        = 0x043,
    GFQ_RESPONSE_QUEUE_INFO       = 0x143,
    GFQ_REQUEST_NODE_INFO         = 0x044,
    GFQ_RESPONSE_NODE_INFO        = 0x144,
    GFQ_REQUEST_READABLE_SEGMENT  = 0x045,
    GFQ_RESPONSE_READABLE_SEGMENT = 0x145,
    GFQ_REQUEST_WRITEABLE_SEGMENT = 0x046,
    GFQ_RESPONSE_WRITEABLE_SEGMENT = 0x146,
    GFQ_REQUEST_EVENT_REGISTER    = 0x047,
    GFQ_RESPONSE_EVENT_REGISTER   = 0x147,
    GFQ_REQUEST_EVENT_UNREGISTER  = 0x048,
    GFQ_RESPONSE_EVENT_UNREGISTER = 0x148,
    GFQ_REQUEST_POLL_QUEUE        = 0x049,
    GFQ_RESPONSE_POLL_QUEUE       = 0x149,
    GFQ_REQUEST_BIND_NODE_GROUP   = 0x050,
    GFQ_RESPONSE_BIND_NODE_GROUP  = 0x150,
    GFQ_REQUEST_CLEAR_QUEUE       = 0x051,
    GFQ_RESPONSE_CLEAR_QUEUE      = 0x151,
    GFQ_REQUEST_STARTUP_TIMESTAMP = 0x052,
    GFQ_RESPONSE_STARTUP_TIMESTAMP = 0x152,
    GFQ_REQUEST_CREATE_QUEUE      = 0x053,
    GFQ_RESPONSE_CREATE_QUEUE     = 0x153,

    //Client --> SegmentServer
    GFQ_REQUEST_PUSH              = 0x061,
    GFQ_RESPONSE_PUSH             = 0x161,
    GFQ_REQUEST_POP               = 0x062,
    GFQ_RESPONSE_POP              = 0x162,
    GFQ_REQUEST_POP_TIMEDOUT      = 0x063,
    GFQ_RESPONSE_POP_TIMEDOUT     = 0x163
};
//end

//Bencoding tag value define
enum 
{
    GFQ_TAG_USER_NAME             = anf::BENC_TAG_USER_BEGIN,
    GFQ_TAG_GROUP_NAME,
    GFQ_TAG_NODE_COUNT,
    GFQ_TAG_NODE_ID,
    GFQ_TAG_NODE_NAME,
    GFQ_TAG_NODE_SERVER_IP,
    GFQ_TAG_NODE_SERVER_PORT,
    GFQ_TAG_NODE_PRIORITY,
    GFQ_TAG_NODE_USED_SEGMENT_COUNT,
    GFQ_TAG_NODE_FREE_SEGMENT_COUNT,
    GFQ_TAG_NODE_FREE_PAGE_COUNT,       //+10
    GFQ_TAG_NODE_USED_PAGE_COUNT,
    GFQ_TAG_NODE_CONNECTION_COUNT,
    GFQ_TAG_NODE_READ_TIMES,
    GFQ_TAG_NODE_WRITE_TIMES,
    GFQ_TAG_NODE_STORAGE_TYPE,
    GFQ_TAG_NODE_CACHE_FREE_PAGE_COUNT,
    GFQ_TAG_NODE_CACHE_USED_PAGE_COUNT,
    GFQ_TAG_NODE_CACHE_READ_TIMES,
    GFQ_TAG_NODE_CACHE_READ_MISSED_TIMES,
    GFQ_TAG_NODE_CACHE_WRITE_TIMES,     //+20
    GFQ_TAG_NODE_CACHE_WRITE_MISSED_TIMES,
    GFQ_TAG_NODE_CACHE_SYNC_TIMES,
    GFQ_TAG_SEGMENT_ID,
    GFQ_TAG_SEGMENT_SIZE,
    GFQ_TAG_SEGMENT_CAPACITY,
    GFQ_TAG_SEGMENT_COUNT,
    GFQ_TAG_OLD_SEGMENT_ID,
    GFQ_TAG_OLD_NODE_NAME,
    GFQ_TAG_OLD_SEGMENT_STATUS,
    GFQ_TAG_QUEUE_ID,                   //+30
    GFQ_TAG_QUEUE_NAME,
    GFQ_TAG_QUEUE_COUNT,
    GFQ_TAG_QUEUE_CAPACITY,
    GFQ_TAG_QUEUE_SIZE,
    GFQ_TAG_QUEUE_BITVEC,
    GFQ_TAG_TIMESTAMP,
    GFQ_TAG_TIMEDOUT,
    GFQ_TAG_TIME_INTERVAL,
    GFQ_TAG_OPTION,
    GFQ_TAG_RECORD_DATA,               //+40
    GFQ_TAG_RECORD_OFFSET,
    GFQ_TAG_RECORD_LIMIT,
    GFQ_TAG_EVENT_CLASS,
    GFQ_TAG_EVENT_PROVIDER,
    GFQ_TAG_EVENT,
    GFQ_TAG_FORCE
};

AIBC_GFQ_NAMESPACE_END

#endif//AIBC_GFQ_MESSAGE_H

