# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("solaris10", "aibc"), BuildSlave("suse10", "aibc"), BuildSlave("hpux21", "aibc"),  BuildSlave("redhat5", "aibc")]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# If you wat to use SVNPoller, it might look something like
#  # Where to get source code changes
# from buildbot.changes.svnpoller import SVNPoller
# source_code_svn_url='https://svn.myproject.org/bluejay/trunk'
# svn_poller = SVNPoller(
#                    svnurl=source_code_svn_url,
#                    pollinterval=60*60, # seconds
#                    histmax=10,
#                    svnbin='/usr/bin/svn',
## )
# c['sources'] = [ svn_poller ]

####### SCHEDULERS

## configure the Schedulers
from twisted.python import log 
def aibclib_update_check(change):
    for file in change.files:
        log.msg(file)
        if file.find('lib/') >= 0 and file.find('lib/adl/') < 0:
            return True
    return False

def adl_update_check(change):
    for file in change.files:
        log.msg(file)
        if file.find('lib/adl/') >= 0:
            return True
    return False

def gfq1_update_check(change):
    for file in change.files:
        log.msg(file)
        if file.find('GFQ/GFQ1') >= 0:
            return True
    return False

def cacheserver1_update_check(change):
    for file in change.files:
        log.msg(file)
        if file.find('CacheServer/CacheServer1/') >= 0:
            return True
    return False


#from buildbot.scheduler import Scheduler, Periodic
from buildbot.scheduler import Scheduler, Dependent
aibclib_builder = ["solaris10", "suse10", "hpux21", "redhat5"]
aibclib_builder_64 = ["solaris10_64", "suse10_64", "hpux21_64", "redhat5_64"]
adl_builder = ["solaris10_adl", "suse10_adl", "redhat5_adl"]
adl_builder_64 = ["solaris10_adl_64", "suse10_adl_64", "redhat5_adl_64"]
gfq1_builder = ["solaris10_gfq1", "suse10_gfq1", "hpux21_gfq1", "redhat5_gfq1"]
gfq1_builder_64 = ["solaris10_gfq1_64", "suse10_gfq1_64", "hpux21_gfq1_64", "redhat5_gfq1_64"]
cacheserver1_builder = ["solaris10_cacheserver1", "suse10_cacheserver1", "hpux21_cacheserver1", "redhat5_cacheserver1"]
cacheserver1_builder_64 = ["solaris10_cacheserver1_64", "suse10_cacheserver1_64", "hpux21_cacheserver1_64", "redhat5_cacheserver1_64"]

c['schedulers'] = []
c['schedulers'].append(Scheduler(name="aibclib", branch=None,
                                 treeStableTimer=60,
                                 fileIsImportant=aibclib_update_check,
                                 builderNames=aibclib_builder))

c['schedulers'].append(Scheduler(name="aibclib64", branch=None,
                                 treeStableTimer=60,
                                 fileIsImportant=aibclib_update_check,
                                 builderNames=aibclib_builder_64))

c['schedulers'].append(Scheduler(name="adl", branch=None,
                                 treeStableTimer=60,
                                 fileIsImportant=adl_update_check,
                                 builderNames=adl_builder + adl_builder_64))

c['schedulers'].append(Scheduler(name="gfq1", branch=None,
                                 treeStableTimer=60,
                                 fileIsImportant=gfq1_update_check,
                                 builderNames=gfq1_builder + gfq1_builder_64))

c['schedulers'].append(Scheduler(name="cacheserver1", branch=None,
                                 treeStableTimer=60,
                                 fileIsImportant=cacheserver1_update_check,
                                 builderNames=cacheserver1_builder + cacheserver1_builder_64))

c['schedulers'].append(Dependent(name="aibclib_depend",
                           upstream=c['schedulers'][0],
                           builderNames=gfq1_builder + cacheserver1_builder))

c['schedulers'].append(Dependent(name="aibclib_depend64",
                           upstream=c['schedulers'][1],
                           builderNames=gfq1_builder_64 + cacheserver1_builder_64))

#c['periodicBuildTimer'] = []
#c['periodicBuildTimer'].append(Periodic(name='aibclib', branch=None,
                                   #builderNames=["aibc-lib"], 
                                   #periodicBuildTimer=43200))

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

cvsroot = ":pserver:aibcpkg@10.3.2.242:/cvsroot"
cvsmodule = "aibc"
FtpUser = 'aibcdist'
FtpPasswd = 'd1sta1bc'
FtpHost = '10.3.2.231'

from buildbot.process import factory
from buildbot.steps.source import CVS
from buildbot.steps.shell import Compile
from buildbot.steps.python_twisted import Trial

#for aibclib
lib = factory.BuildFactory()
lib.addStep(Compile(command=["rm", "-rf", "*"]))
lib.addStep(Compile(command=["cvs", "-d", cvsroot, "co", cvsmodule]))
lib.addStep(Compile(command=["./aibc/lib/autogen.sh"]))
lib.addStep(Compile(command=["make", "clean"]))
lib.addStep(Compile(command=["make"]))
lib.addStep(Compile(command=["make", "install", "DESTDIR=/tmp/__buildbot_inst"]))
lib.addStep(Compile(command=["cp", "./aibc/tools/AutoBuild/md5gen.py", "."]))
lib.addStep(Compile(command=["./aibc/tools/AutoBuild/aibc_package.sh", "-s./aibc/lib/", "-b./", "-i/tmp/__buildbot_inst/usr/local/", "-u", FtpUser, "-p", FtpPasswd, "-h", FtpHost, "-m32"]))
lib.addStep(Compile(command=["./aibc/tools/AutoBuild/updateAibcLib", "32"]))

#for aibclib_64
lib64 = factory.BuildFactory()
lib64.addStep(Compile(command=["rm", "-rf", "*"]))
lib64.addStep(Compile(command=["cvs", "-d", cvsroot, "co", cvsmodule]))
lib64.addStep(Compile(command=["./aibc/lib/autogen.sh", "-m64"]))
lib64.addStep(Compile(command=["make", "clean"]))
lib64.addStep(Compile(command=["make"]))
lib64.addStep(Compile(command=["make", "install", "DESTDIR=/tmp/__buildbot_inst_64"]))
lib64.addStep(Compile(command=["cp", "./aibc/tools/AutoBuild/md5gen.py", "."]))
lib64.addStep(Compile(command=["./aibc/tools/AutoBuild/aibc_package.sh", "-s./aibc/lib/", "-b./", "-i/tmp/__buildbot_inst_64/usr/local/", "-u", FtpUser, "-p", FtpPasswd, "-h", FtpHost, "-m64"]))
lib64.addStep(Compile(command=["./aibc/tools/AutoBuild/updateAibcLib", "64"]))

#for adl
adlDailyBuildPath = "/ext/dist/aibcdist/AIBCDL/DailyBuild"
adl = factory.BuildFactory()
adl.addStep(Compile(command=["rm", "-rf", "*"]))
adl.addStep(Compile(command=["cvs", "-d", cvsroot, "co", cvsmodule]))
adl.addStep(Compile(command=["./aibc/tools/AutoBuild/make_package_adl.sh", "-m32", "-d", adlDailyBuildPath, "-u", FtpUser, "-p", FtpPasswd, "-h", FtpHost]))

#for adl_64
adlDailyBuildPath = "/ext/dist/aibcdist/AIBCDL/DailyBuild"
adl_64 = factory.BuildFactory()
adl_64.addStep(Compile(command=["rm", "-rf", "*"]))
adl_64.addStep(Compile(command=["cvs", "-d", cvsroot, "co", cvsmodule]))
adl_64.addStep(Compile(command=["./aibc/tools/AutoBuild/make_package_adl.sh", "-m64", "-d", adlDailyBuildPath, "-u", FtpUser, "-p", FtpPasswd, "-h", FtpHost]))

#for gfq1
gfqDailyBuildPath = "/ext/dist/aibcdist/AIBCGFQ/DailyBuild"
gfq1 = factory.BuildFactory()
gfq1.addStep(Compile(command=["rm", "-rf", "*"]))
gfq1.addStep(Compile(command=["cvs", "-d", cvsroot, "co", cvsmodule]))
gfq1.addStep(Compile(command=["./aibc/tools/AutoBuild/make_package_gfq1.sh", "-m32", "-d", gfqDailyBuildPath, "-u", FtpUser, "-p", FtpPasswd, "-h", FtpHost]))

#for gfq1_64
gfqDailyBuildPath = "/ext/dist/aibcdist/AIBCGFQ/DailyBuild"
gfq1_64 = factory.BuildFactory()
gfq1_64.addStep(Compile(command=["rm", "-rf", "*"]))
gfq1_64.addStep(Compile(command=["cvs", "-d", cvsroot, "co", cvsmodule]))
gfq1_64.addStep(Compile(command=["./aibc/tools/AutoBuild/make_package_gfq1.sh", "-m64", "-d", gfqDailyBuildPath, "-u", FtpUser, "-p", FtpPasswd, "-h", FtpHost]))

#for cacheserver
cacheserverDailyBuildPath = "/ext/dist/aibcdist/AIBCCacheServer/DailyBuild"
cacheserver1 = factory.BuildFactory()
cacheserver1.addStep(Compile(command=["rm", "-rf", "*"]))
cacheserver1.addStep(Compile(command=["cvs", "-d", cvsroot, "co", cvsmodule]))
cacheserver1.addStep(Compile(command=["./aibc/tools/AutoBuild/make_package_cacheserver1.sh", "-m32", "-d", cacheserverDailyBuildPath, "-u", FtpUser, "-p", FtpPasswd, "-h", FtpHost]))

#for cacheserver1_64
cacheserverDailyBuildPath = "/ext/dist/aibcdist/AIBCCacheServer/DailyBuild"
cacheserver1_64 = factory.BuildFactory()
cacheserver1_64.addStep(Compile(command=["rm", "-rf", "*"]))
cacheserver1_64.addStep(Compile(command=["cvs", "-d", cvsroot, "co", cvsmodule]))
cacheserver1_64.addStep(Compile(command=["./aibc/tools/AutoBuild/make_package_cacheserver1.sh", "-m64", "-d", cacheserverDailyBuildPath, "-u", FtpUser, "-p", FtpPasswd, "-h", FtpHost]))

solaris10_lib_builder = {'name': "solaris10",
      'slavename': "solaris10",
      'builddir': "lib_solaris",
      'factory': lib,
      }

solaris10_lib_builder_64 = {'name': "solaris10_64",
      'slavename': "solaris10",
      'builddir': "lib_solaris_64",
      'factory': lib64,
      }

suse10_lib_builder = {'name': "suse10",
      'slavename': "suse10",
      'builddir': "lib_suse10",
      'factory': lib,
      }

suse10_lib_builder_64 = {'name': "suse10_64",
      'slavename': "suse10",
      'builddir': "lib_suse10_64",
      'factory': lib64,
      }

hpux21_lib_builder = {'name': "hpux21",
      'slavename': "hpux21",
      'builddir': "lib_hpux",
      'factory': lib,
      }

hpux21_lib_builder_64 = {'name': "hpux21_64",
      'slavename': "hpux21",
      'builddir': "lib_hpux_64",
      'factory': lib64,
      }

redhat5_lib_builder = {'name': "redhat5",
      'slavename': "redhat5",
      'builddir': "lib_redhat5",
      'factory': lib,
      }

redhat5_lib_builder_64 = {'name': "redhat5_64",
      'slavename': "redhat5",
      'builddir': "lib_redhat5_64",
      'factory': lib64,
      }

solaris10_adl_builder = {'name': "solaris10_adl",
      'slavename': "solaris10",
      'builddir': "adl_solaris",
      'factory': adl,
      }

solaris10_adl_builder_64 = {'name': "solaris10_adl_64",
      'slavename': "solaris10",
      'builddir': "adl_solaris_64",
      'factory': adl_64,
      }

suse10_adl_builder = {'name': "suse10_adl",
      'slavename': "suse10",
      'builddir': "adl_suse10",
      'factory': adl,
      }

suse10_adl_builder_64 = {'name': "suse10_adl_64",
      'slavename': "suse10",
      'builddir': "adl_suse10_64",
      'factory': adl_64,
      }

hpux21_adl_builder_64 = {'name': "hpux21_adl_64",
      'slavename': "hpux21",
      'builddir': "adl_hpux21_64",
      'factory': adl_64,
      }

redhat5_adl_builder = {'name': "redhat5_adl",
      'slavename': "redhat5",
      'builddir': "adl_redhat5",
      'factory': adl,
      }

redhat5_adl_builder_64 = {'name': "redhat5_adl_64",
      'slavename': "redhat5",
      'builddir': "adl_redhat5_64",
      'factory': adl_64,
      }

solaris10_gfq1_builder = {'name': "solaris10_gfq1",
      'slavename': "solaris10",
      'builddir': "gfq1_solaris",
      'factory': gfq1,
      }

solaris10_gfq1_builder_64 = {'name': "solaris10_gfq1_64",
      'slavename': "solaris10",
      'builddir': "gfq1_solaris_64",
      'factory': gfq1_64,
      }

suse10_gfq1_builder = {'name': "suse10_gfq1",
      'slavename': "suse10",
      'builddir': "gfq1_suse10",
      'factory': gfq1,
      }

suse10_gfq1_builder_64 = {'name': "suse10_gfq1_64",
      'slavename': "suse10",
      'builddir': "gfq1_suse10_64",
      'factory': gfq1_64,
      }

hpux21_gfq1_builder = {'name': "hpux21_gfq1",
      'slavename': "hpux21",
      'builddir': "gfq1_hpux21",
      'factory': gfq1,
      }

hpux21_gfq1_builder_64 = {'name': "hpux21_gfq1_64",
      'slavename': "hpux21",
      'builddir': "gfq1_hpux21_64",
      'factory': gfq1_64,
      }

redhat5_gfq1_builder = {'name': "redhat5_gfq1",
      'slavename': "redhat5",
      'builddir': "gfq1_redhat5",
      'factory': gfq1,
      }

redhat5_gfq1_builder_64 = {'name': "redhat5_gfq1_64",
      'slavename': "redhat5",
      'builddir': "gfq1_redhat5_64",
      'factory': gfq1_64,
      }

solaris10_cacheserver1_builder = {'name': "solaris10_cacheserver1",
      'slavename': "solaris10",
      'builddir': "cacheserver1_solaris",
      'factory': cacheserver1,
      }

solaris10_cacheserver1_builder_64 = {'name': "solaris10_cacheserver1_64",
      'slavename': "solaris10",
      'builddir': "cacheserver1_solaris_64",
      'factory': cacheserver1_64,
      }

suse10_cacheserver1_builder = {'name': "suse10_cacheserver1",
      'slavename': "suse10",
      'builddir': "cacheserver1_suse10",
      'factory': cacheserver1,
      }

suse10_cacheserver1_builder_64 = {'name': "suse10_cacheserver1_64",
      'slavename': "suse10",
      'builddir': "cacheserver1_suse10_64",
      'factory': cacheserver1_64,
      }

hpux21_cacheserver1_builder = {'name': "hpux21_cacheserver1",
      'slavename': "hpux21",
      'builddir': "cacheserver1_hpux21",
      'factory': cacheserver1,
      }

hpux21_cacheserver1_builder_64 = {'name': "hpux21_cacheserver1_64",
      'slavename': "hpux21",
      'builddir': "cacheesrver1_hpux21_64",
      'factory': cacheserver1_64,
      }

redhat5_cacheserver1_builder = {'name': "redhat5_cacheserver1",
      'slavename': "redhat5",
      'builddir': "cacheserver1_redhat5",
      'factory': cacheserver1,
      }

redhat5_cacheserver1_builder_64 = {'name': "redhat5_cacheserver1_64",
      'slavename': "redhat5",
      'builddir': "cacheserver1_redhat5_64",
      'factory': cacheserver1_64,
      }

c['builders'] = [
    solaris10_lib_builder, 
    solaris10_lib_builder_64, 
    suse10_lib_builder, 
    suse10_lib_builder_64,
    hpux21_lib_builder, 
    hpux21_lib_builder_64, 
    redhat5_lib_builder, 
    redhat5_lib_builder_64, 
    solaris10_gfq1_builder,
    solaris10_gfq1_builder_64,
    suse10_gfq1_builder,
    suse10_gfq1_builder_64,
    hpux21_gfq1_builder,
    hpux21_gfq1_builder_64,
    redhat5_gfq1_builder,
    redhat5_gfq1_builder_64,
    solaris10_adl_builder,
    solaris10_adl_builder_64,
    suse10_adl_builder,
    suse10_adl_builder_64,
    hpux21_adl_builder_64,
    redhat5_adl_builder,
    redhat5_adl_builder_64,
    solaris10_cacheserver1_builder,
    solaris10_cacheserver1_builder_64,
    suse10_cacheserver1_builder,
    suse10_cacheserver1_builder_64,
    hpux21_cacheserver1_builder,
    hpux21_cacheserver1_builder_64,
    redhat5_cacheserver1_builder,
    redhat5_cacheserver1_builder_64]



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
# from buildbot.status import html
# c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

from buildbot.status import html
#c['status'].append(html.WebStatus(http_port=8010))
c['status'].append(html.WebStatus(http_port=8010, allowForce=True))

from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
from buildbot.status.builder import Results
     
def message_formatter(mode, name, build, results, master_status):
    """Provide a customized message to BuildBot's MailNotifier.

    The last 80 lines of the log are provided as well as the changes
    relevant to the build.  Message content is formatted as html.
    """
    result = Results[results]

    limit_lines = 80
    text = list()
    text.append('<h4>Build status: %s</h4>' % result.upper())
    text.append("Buildslave for this Build: <b>%s</b>" % build.getSlavename())
    text.append('<br>')
    if master_status.getURLForThing(build):
        text.append('Complete logs for all build steps: <a href="%s">%s</a>'
                    % (master_status.getURLForThing(build),
                       master_status.getURLForThing(build))
                    )
    text.append('<br>')
    text.append("Build Reason: %s" % build.getReason())
    text.append('<br>')
 
    source = ""
    ss = build.getSourceStamp()
    if ss.branch:
        source += "[branch %s] " % ss.branch
    if ss.revision:
        source +=  ss.revision
    else:
        source += "HEAD"
    if ss.patch:
        source += " (plus patch)"
    text.append("Build Source Stamp: <b>%s</b>" % source)
    text.append('<br>')
    text.append("Blamelist: %s" % ",".join(build.getResponsibleUsers()))
    if ss.changes:
        text.append('<h4>Recent Changes:</h4>')
        text.extend([c.asHTML() for c in ss.changes])

    logs = list()
    for log in build.getLogs():
        log_name = "%s.%s" % (log.getStep().getName(), log.getName())
        log_status, dummy = log.getStep().getResults()
        log_body = log.getText().splitlines() # Note: can be VERY LARGE
        log_url = '%s/steps/%s/logs/%s' % (master_status.getURLForThing(build),
                                           log.getStep().getName(),
                                           log.getName())
        logs.append((log_name, log_url, log_body, log_status))

    name, url, content, logstatus = logs[-1]

    text.append('<i>Detailed log of last build step:</i> <a href="%s">%s</a>'
                % (url, url))
    text.append('<br>')
    text.append('<h4>Last %d lines of "%s":</h4>' % (limit_lines, name))
    text.append('<p>')
    text.append('<br>'.join([line for line in
                             content[len(content)-limit_lines:]]))
    text.append('</p>')
    text.append('<br><br>')
    text.append('<b>--AIBC Auto Build System</b>')
    return {
        'body': "\n".join(text),
        'type': 'html'
        }

mn = mail.MailNotifier(fromaddr="zhangqu@asiainfo-linkage.com", 
    sendToInterestedUsers=False,
    mode='all',
    #extraRecipients=['zhangqu@asiainfo-linkage.com'],
    extraRecipients=['zhangqu@asiainfo-linkage.com', 'cuixb@asiainfo-linkage.com', 'fengzz@asiainfo-linkage.com', 'daizh@asiainfo-linkage.com'],
    messageFormatter=message_formatter,
    relayhost='10.1.1.182')

c["status"].append(mn)

#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "aibcbuild"
c['projectURL'] = "http://10.3.3.108:8010/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://10.3.3.108:8010/"
